generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model captions {
  cap_id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  map_id                      String?   @unique @db.Uuid
  model                       String
  raw_json                    Json
  generated                   String
  edited                      String?
  accuracy                    Int?      @db.SmallInt
  context                     Int?      @db.SmallInt
  usability                   Int?      @db.SmallInt
  created_at                  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime? @db.Timestamptz(6)
  maps                        maps?     @relation(fields: [map_id], references: [map_id], onDelete: Cascade, onUpdate: NoAction)
  model_captions_modelTomodel model     @relation("captions_modelTomodel", fields: [model], references: [m_code], onDelete: NoAction, onUpdate: NoAction)
}

model category {
  cat_code                     String @id
  label                        String
  maps_maps_categoryTocategory maps[] @relation("maps_categoryTocategory")
}

model country {
  c_code        String          @id @db.Char(2)
  label         String
  map_countries map_countries[]
}

model goose_db_version {
  id         Int      @id @default(autoincrement())
  version_id BigInt
  is_applied Boolean
  tstamp     DateTime @default(now()) @db.Timestamp(6)
}

model map_countries {
  map_id  String  @db.Uuid
  c_code  String  @db.Char(2)
  country country @relation(fields: [c_code], references: [c_code], onDelete: NoAction, onUpdate: NoAction)
  maps    maps    @relation(fields: [map_id], references: [map_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([map_id, c_code])
}

model maps {
  map_id                           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file_key                         String
  sha256                           String
  created_at                       DateTime        @default(now()) @db.Timestamptz(6)
  source                           String
  region                           String
  category                         String
  captions                         captions?
  map_countries                    map_countries[]
  category_maps_categoryTocategory category        @relation("maps_categoryTocategory", fields: [category], references: [cat_code], onDelete: NoAction, onUpdate: NoAction)
  region_maps_regionToregion       region          @relation("maps_regionToregion", fields: [region], references: [r_code], onDelete: NoAction, onUpdate: NoAction)
  sources                          sources         @relation(fields: [source], references: [s_code], onDelete: NoAction, onUpdate: NoAction)
}

model model {
  m_code                         String     @id
  label                          String
  captions_captions_modelTomodel captions[] @relation("captions_modelTomodel")
}

model region {
  r_code                   String @id
  label                    String
  maps_maps_regionToregion maps[] @relation("maps_regionToregion")
}

model sources {
  s_code String @id
  label  String
  maps   maps[]
}
